{"version":3,"file":"technoidentity-dev-utils.cjs.production.min.js","sources":["../src/fake.ts","../src/fakeFromRT.ts","../src/fakeServer.ts"],"sourcesContent":["import Chance from 'chance'\nimport {\n  AnyArrayType,\n  ArrayC,\n  ArrayType,\n  BooleanType,\n  EnumType,\n  ExactType,\n  InterfaceType,\n  IntersectionType,\n  KeyofType,\n  LiteralType,\n  Mixed,\n  NullType,\n  NumberType,\n  ObjType,\n  PartialType,\n  ReadonlyArrayC,\n  ReadonlyArrayType,\n  ReadonlyType,\n  RefinementType,\n  StringType,\n  TupleType,\n  Type,\n  TypeOf,\n  UndefinedType,\n  UnionType,\n  unknown,\n  VoidType,\n} from 'technoidentity-utils'\nimport { buildObject, repeatedly } from 'technoidentity-utils'\n\n// tslint:disable typedef no-use-before-declare\n\nconst chance = new Chance()\n\nexport const defaultOptions = {\n  integer: { min: 100, max: 1000 },\n  floating: { min: 0, max: 100, fixed: 2 },\n  sentence: { words: 4 },\n  array: { minLength: 0, maxLength: 6 },\n}\n\nexport type FakeOptions = typeof defaultOptions\n\nfunction fakeArrayFromType<T extends Mixed>(\n  spec: T,\n  options: FakeOptions,\n): ReadonlyArray<TypeOf<typeof spec>> {\n  const n = chance.integer({\n    min: options.array.minLength,\n    max: options.array.maxLength,\n  })\n\n  return repeatedly(n, () => fake(spec, options))\n}\n\nfunction fakeArray<T extends Mixed>(\n  spec: ArrayC<T> | ReadonlyArrayC<T>,\n  options: FakeOptions,\n): TypeOf<typeof spec> {\n  return fakeArrayFromType(spec.type, options)\n}\n\nexport function fake<T extends Mixed>(\n  spec: T,\n  options: FakeOptions = defaultOptions,\n): TypeOf<typeof spec> {\n  if (spec.name === 'Int') {\n    return chance.integer(options.integer)\n  }\n\n  if (spec instanceof NumberType) {\n    return chance.floating(options.floating)\n  }\n\n  if (spec instanceof StringType) {\n    return chance.sentence(options.sentence)\n  }\n\n  if (spec instanceof BooleanType) {\n    return chance.bool()\n  }\n\n  if (spec.name === 'Date') {\n    return chance.date()\n  }\n\n  if (spec.name === 'DateFromISOString') {\n    return chance.date()\n  }\n\n  if (spec instanceof KeyofType) {\n    return chance.pickone(Object.keys(spec.keys))\n  }\n  if (spec instanceof EnumType) {\n    return chance.pickone(spec.keys)\n  }\n\n  if (spec instanceof LiteralType) {\n    return spec.value\n  }\n\n  if (spec instanceof NullType) {\n    // tslint:disable-next-line: no-null-keyword\n    return null\n  }\n  if (spec instanceof UndefinedType || spec instanceof VoidType) {\n    return undefined\n  }\n\n  if (\n    spec instanceof ReadonlyType ||\n    spec instanceof ExactType ||\n    spec instanceof RefinementType // No easy way to do this correctly?\n  ) {\n    return fake(spec.type, options)\n  }\n\n  if (spec instanceof ReadonlyArrayType) {\n    return fakeArrayFromType(spec.type, options)\n  }\n\n  if (spec instanceof AnyArrayType) {\n    return fakeArrayFromType(unknown, options)\n  }\n\n  if (spec instanceof ArrayType) {\n    return fakeArray(spec, options)\n  }\n\n  if (\n    spec instanceof InterfaceType ||\n    spec instanceof PartialType ||\n    spec instanceof ObjType\n  ) {\n    return buildObject(spec.props, v => fake(v, options))\n  }\n\n  if (spec instanceof IntersectionType) {\n    return spec.types\n      .map((t: Type<any>) => fake(t, options))\n      .reduce((acc: any, x: any) => ({ ...acc, ...x }))\n  }\n\n  if (spec instanceof UnionType) {\n    const one = chance.integer({ min: 0, max: spec.types.length - 1 })\n\n    return fake(spec.types[one], options)\n  }\n\n  if (spec instanceof TupleType) {\n    return spec.types.map((p: Type<any>) => fake(p, options))\n  }\n\n  console.log('hello')\n  throw new Error(`Unsupported type: ${spec.name}`)\n}\n","import Chance from 'chance'\nimport t, { Any, Constructor, Irreducible } from 'tcomb'\nimport {\n  buildObject,\n  isDict,\n  isEnums,\n  isInteger,\n  isInterface,\n  isIntersection,\n  isIrreducible,\n  isList,\n  isMaybe,\n  isStruct,\n  isTuple,\n  isType,\n  isUnion,\n  repeatedly,\n  verify,\n} from 'technoidentity-utils'\nimport { defaultOptions, FakeOptions } from './fake'\n\n// tslint:disable typedef\n\nconst chance = new Chance()\n\n// tslint:disable-next-line: readonly-array\nconst primitives = [t.Number, t.String, t.Boolean, t.Date, t.Nil]\n\nfunction fakeFromIrreducible(rt: Irreducible<any>, options: FakeOptions): any {\n  verify(rt.meta.kind === 'irreducible', 'rt must be irreducible')\n\n  switch (rt.meta.name) {\n    case 'Number':\n      return chance.floating(options.floating)\n\n    case 'Any':\n      return fakeFromRT(chance.pickone(primitives))\n\n    case 'String':\n      return chance.sentence(options.sentence)\n\n    case 'Boolean':\n      return chance.bool()\n\n    case 'Date':\n      return chance.date()\n\n    case 'Function':\n      return (..._: any[]) => fakeFromRT(Any, options)\n\n    case 'Nil':\n      // tslint:disable-next-line: no-null-keyword\n      return chance.pickone([undefined, null])\n\n    case 'Error':\n      return new Error('fake error')\n\n    case 'Object':\n      const kn = chance.integer({ min: 4, max: 8 })\n\n      const kv = repeatedly(kn, () => [\n        chance.word({ length: chance.integer({ min: 4, max: 8 }) }),\n        fakeFromRT(chance.pickone(primitives), options),\n      ])\n\n      return kv.reduce((acc, [k, v]) => ({ ...acc, [k]: v }))\n\n    case 'Array':\n      const n: number = chance.integer({\n        min: options.array.minLength,\n        max: options.array.maxLength,\n      })\n\n      return repeatedly(n, () =>\n        fakeFromRT(chance.pickone(primitives), options),\n      )\n\n    default:\n      throw new Error(\n        `Unsupported tcomb type: ${rt.meta.kind}: ${rt.meta.name}`,\n      )\n  }\n}\n\nexport function fakeFromRT(\n  rt: Constructor<any>,\n  options: FakeOptions = defaultOptions,\n): any {\n  if (!isType(rt)) {\n    console.log(rt.name)\n    throw new Error('I have no idea about what do with a function')\n  }\n\n  verify(rt && rt.meta && rt.meta.kind)\n\n  if (isInteger(rt)) {\n    return chance.integer(options.integer)\n  }\n\n  if (isStruct(rt)) {\n    return rt(buildObject(rt.meta.props, p => fakeFromRT(p, options)))\n  }\n\n  if (isInterface(rt)) {\n    return buildObject(rt.meta.props, p => fakeFromRT(p, options))\n  }\n\n  if (isList(rt)) {\n    const n: number = chance.integer({\n      min: options.array.minLength,\n      max: options.array.maxLength,\n    })\n\n    return repeatedly(n, () => fakeFromRT(rt.meta.type, options))\n  }\n\n  if (isDict(rt)) {\n    return {}\n  }\n\n  if (isIntersection(rt)) {\n    return rt.meta.types\n      .map(p => fakeFromRT(p, options))\n      .reduce((acc, x) => ({ ...acc, ...x }))\n  }\n\n  if (isMaybe(rt)) {\n    return chance.pickone([fakeFromRT(rt.meta.type), undefined])\n  }\n\n  if (isUnion(rt)) {\n    return chance.pickone(rt.meta.types.map(p => fakeFromRT(p, options)))\n  }\n\n  if (isEnums(rt)) {\n    return chance.pickone(Object.keys(rt.meta.map))\n  }\n\n  if (isTuple(rt)) {\n    return rt.meta.types.map(p => fakeFromRT(p, options))\n  }\n\n  if (isIrreducible(rt)) {\n    return fakeFromIrreducible(rt, options)\n  }\n\n  throw new Error(`Unsupported tcomb type: ${rt.meta.kind}`)\n}\n","import * as server from 'json-server'\nimport { AnyObj, range } from 'technoidentity-utils'\nimport { fake } from './fake'\n\ninterface ResourceConfig {\n  readonly spec: AnyObj\n  readonly name: string\n  readonly count: number\n}\n\nfunction fakeObjects(resources: readonly ResourceConfig[]) {\n  const result: any = {}\n  for (const { name, count, spec } of resources) {\n    // tslint:disable-next-line: no-object-mutation\n    result[name] = range(count).map(_ => fake(spec))\n  }\n\n  return result\n}\n\nexport function startFakeJSONServer(\n  resources: readonly ResourceConfig[],\n  port = process.env.PORT || 5555,\n) {\n  server\n    .create()\n    .use(server.defaults())\n    .use(server.router(fakeObjects(resources)))\n    .listen(port, () => {\n      console.log(`fake JSON Server is running at port: ${port}`)\n    })\n}\n"],"names":["chance","Chance","defaultOptions","integer","min","max","floating","fixed","sentence","words","array","minLength","maxLength","fakeArrayFromType","spec","options","n","repeatedly","fake","name","NumberType","StringType","BooleanType","bool","date","KeyofType","pickone","Object","keys","EnumType","LiteralType","value","NullType","UndefinedType","VoidType","ReadonlyType","ExactType","RefinementType","type","ReadonlyArrayType","AnyArrayType","unknown","ArrayType","fakeArray","InterfaceType","PartialType","ObjType","buildObject","props","v","IntersectionType","types","map","t","reduce","acc","x","UnionType","one","length","TupleType","p","console","log","Error","primitives","Number","String","Boolean","Date","Nil","fakeFromRT","rt","isType","verify","meta","kind","isInteger","isStruct","isInterface","isList","isDict","isIntersection","isMaybe","undefined","isUnion","isEnums","isTuple","isIrreducible","Any","kn","word","fakeFromIrreducible","resources","port","process","env","PORT","server","use","result","range","count","_","fakeObjects","listen"],"mappings":"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"}