{"version":3,"file":"technoidentity-dev-utils.cjs.development.js","sources":["../src/fake.ts","../src/fakeFromRT.ts","../src/fakeServer.ts"],"sourcesContent":["import Chance from 'chance'\nimport {\n  AnyArrayType,\n  ArrayC,\n  ArrayType,\n  BooleanType,\n  EnumType,\n  ExactType,\n  InterfaceType,\n  IntersectionType,\n  KeyofType,\n  LiteralType,\n  Mixed,\n  NullType,\n  NumberType,\n  ObjType,\n  PartialType,\n  ReadonlyArrayC,\n  ReadonlyArrayType,\n  ReadonlyType,\n  RefinementType,\n  StringType,\n  TupleType,\n  Type,\n  TypeOf,\n  UndefinedType,\n  UnionType,\n  unknown,\n  VoidType,\n} from 'technoidentity-utils'\nimport { buildObject, repeatedly } from 'technoidentity-utils'\n\n// tslint:disable typedef no-use-before-declare\n\nconst chance = new Chance()\n\nexport const defaultOptions = {\n  integer: { min: 100, max: 1000 },\n  floating: { min: 0, max: 100, fixed: 2 },\n  sentence: { words: 4 },\n  array: { minLength: 0, maxLength: 6 },\n}\n\nexport type FakeOptions = typeof defaultOptions\n\nfunction fakeArrayFromType<T extends Mixed>(\n  spec: T,\n  options: FakeOptions,\n): ReadonlyArray<TypeOf<typeof spec>> {\n  const n = chance.integer({\n    min: options.array.minLength,\n    max: options.array.maxLength,\n  })\n\n  return repeatedly(n, () => fake(spec, options))\n}\n\nfunction fakeArray<T extends Mixed>(\n  spec: ArrayC<T> | ReadonlyArrayC<T>,\n  options: FakeOptions,\n): TypeOf<typeof spec> {\n  return fakeArrayFromType(spec.type, options)\n}\n\nexport function fake<T extends Mixed>(\n  spec: T,\n  options: FakeOptions = defaultOptions,\n): TypeOf<typeof spec> {\n  if (spec.name === 'Int') {\n    return chance.integer(options.integer)\n  }\n\n  if (spec instanceof NumberType) {\n    return chance.floating(options.floating)\n  }\n\n  if (spec instanceof StringType) {\n    return chance.sentence(options.sentence)\n  }\n\n  if (spec instanceof BooleanType) {\n    return chance.bool()\n  }\n\n  if (spec.name === 'Date') {\n    return chance.date()\n  }\n\n  if (spec.name === 'DateFromISOString') {\n    return chance.date()\n  }\n\n  if (spec instanceof KeyofType) {\n    return chance.pickone(Object.keys(spec.keys))\n  }\n  if (spec instanceof EnumType) {\n    return chance.pickone(spec.keys)\n  }\n\n  if (spec instanceof LiteralType) {\n    return spec.value\n  }\n\n  if (spec instanceof NullType) {\n    // tslint:disable-next-line: no-null-keyword\n    return null\n  }\n  if (spec instanceof UndefinedType || spec instanceof VoidType) {\n    return undefined\n  }\n\n  if (\n    spec instanceof ReadonlyType ||\n    spec instanceof ExactType ||\n    spec instanceof RefinementType // No easy way to do this correctly?\n  ) {\n    return fake(spec.type, options)\n  }\n\n  if (spec instanceof ReadonlyArrayType) {\n    return fakeArrayFromType(spec.type, options)\n  }\n\n  if (spec instanceof AnyArrayType) {\n    return fakeArrayFromType(unknown, options)\n  }\n\n  if (spec instanceof ArrayType) {\n    return fakeArray(spec, options)\n  }\n\n  if (\n    spec instanceof InterfaceType ||\n    spec instanceof PartialType ||\n    spec instanceof ObjType\n  ) {\n    return buildObject(spec.props, v => fake(v, options))\n  }\n\n  if (spec instanceof IntersectionType) {\n    return spec.types\n      .map((t: Type<any>) => fake(t, options))\n      .reduce((acc: any, x: any) => ({ ...acc, ...x }))\n  }\n\n  if (spec instanceof UnionType) {\n    const one = chance.integer({ min: 0, max: spec.types.length - 1 })\n\n    return fake(spec.types[one], options)\n  }\n\n  if (spec instanceof TupleType) {\n    return spec.types.map((p: Type<any>) => fake(p, options))\n  }\n\n  console.log('hello')\n  throw new Error(`Unsupported type: ${spec.name}`)\n}\n","import Chance from 'chance'\nimport t, { Any, Constructor, Irreducible } from 'tcomb'\nimport {\n  buildObject,\n  isDict,\n  isEnums,\n  isInteger,\n  isInterface,\n  isIntersection,\n  isIrreducible,\n  isList,\n  isMaybe,\n  isStruct,\n  isTuple,\n  isType,\n  isUnion,\n  repeatedly,\n  verify,\n} from 'technoidentity-utils'\nimport { defaultOptions, FakeOptions } from './fake'\n\n// tslint:disable typedef\n\nconst chance = new Chance()\n\n// tslint:disable-next-line: readonly-array\nconst primitives = [t.Number, t.String, t.Boolean, t.Date, t.Nil]\n\nfunction fakeFromIrreducible(rt: Irreducible<any>, options: FakeOptions): any {\n  verify(rt.meta.kind === 'irreducible', 'rt must be irreducible')\n\n  switch (rt.meta.name) {\n    case 'Number':\n      return chance.floating(options.floating)\n\n    case 'Any':\n      return fakeFromRT(chance.pickone(primitives))\n\n    case 'String':\n      return chance.sentence(options.sentence)\n\n    case 'Boolean':\n      return chance.bool()\n\n    case 'Date':\n      return chance.date()\n\n    case 'Function':\n      return (..._: any[]) => fakeFromRT(Any, options)\n\n    case 'Nil':\n      // tslint:disable-next-line: no-null-keyword\n      return chance.pickone([undefined, null])\n\n    case 'Error':\n      return new Error('fake error')\n\n    case 'Object':\n      const kn = chance.integer({ min: 4, max: 8 })\n\n      const kv = repeatedly(kn, () => [\n        chance.word({ length: chance.integer({ min: 4, max: 8 }) }),\n        fakeFromRT(chance.pickone(primitives), options),\n      ])\n\n      return kv.reduce((acc, [k, v]) => ({ ...acc, [k]: v }))\n\n    case 'Array':\n      const n: number = chance.integer({\n        min: options.array.minLength,\n        max: options.array.maxLength,\n      })\n\n      return repeatedly(n, () =>\n        fakeFromRT(chance.pickone(primitives), options),\n      )\n\n    default:\n      throw new Error(\n        `Unsupported tcomb type: ${rt.meta.kind}: ${rt.meta.name}`,\n      )\n  }\n}\n\nexport function fakeFromRT(\n  rt: Constructor<any>,\n  options: FakeOptions = defaultOptions,\n): any {\n  if (!isType(rt)) {\n    console.log(rt.name)\n    throw new Error('I have no idea about what do with a function')\n  }\n\n  verify(rt && rt.meta && rt.meta.kind)\n\n  if (isInteger(rt)) {\n    return chance.integer(options.integer)\n  }\n\n  if (isStruct(rt)) {\n    return rt(buildObject(rt.meta.props, p => fakeFromRT(p, options)))\n  }\n\n  if (isInterface(rt)) {\n    return buildObject(rt.meta.props, p => fakeFromRT(p, options))\n  }\n\n  if (isList(rt)) {\n    const n: number = chance.integer({\n      min: options.array.minLength,\n      max: options.array.maxLength,\n    })\n\n    return repeatedly(n, () => fakeFromRT(rt.meta.type, options))\n  }\n\n  if (isDict(rt)) {\n    return {}\n  }\n\n  if (isIntersection(rt)) {\n    return rt.meta.types\n      .map(p => fakeFromRT(p, options))\n      .reduce((acc, x) => ({ ...acc, ...x }))\n  }\n\n  if (isMaybe(rt)) {\n    return chance.pickone([fakeFromRT(rt.meta.type), undefined])\n  }\n\n  if (isUnion(rt)) {\n    return chance.pickone(rt.meta.types.map(p => fakeFromRT(p, options)))\n  }\n\n  if (isEnums(rt)) {\n    return chance.pickone(Object.keys(rt.meta.map))\n  }\n\n  if (isTuple(rt)) {\n    return rt.meta.types.map(p => fakeFromRT(p, options))\n  }\n\n  if (isIrreducible(rt)) {\n    return fakeFromIrreducible(rt, options)\n  }\n\n  throw new Error(`Unsupported tcomb type: ${rt.meta.kind}`)\n}\n","import * as server from 'json-server'\nimport { AnyObj, range } from 'technoidentity-utils'\nimport { fake } from './fake'\n\ninterface ResourceConfig {\n  readonly spec: AnyObj\n  readonly name: string\n  readonly count: number\n}\n\nfunction fakeObjects(resources: readonly ResourceConfig[]) {\n  const result: any = {}\n  for (const { name, count, spec } of resources) {\n    // tslint:disable-next-line: no-object-mutation\n    result[name] = range(count).map(_ => fake(spec))\n  }\n\n  return result\n}\n\nexport function startFakeJSONServer(\n  resources: readonly ResourceConfig[],\n  port = process.env.PORT || 5555,\n) {\n  server\n    .create()\n    .use(server.defaults())\n    .use(server.router(fakeObjects(resources)))\n    .listen(port, () => {\n      console.log(`fake JSON Server is running at port: ${port}`)\n    })\n}\n"],"names":["chance","Chance","defaultOptions","integer","min","max","floating","fixed","sentence","words","array","minLength","maxLength","fakeArrayFromType","spec","options","n","repeatedly","fake","fakeArray","type","name","NumberType","StringType","BooleanType","bool","date","KeyofType","pickone","Object","keys","EnumType","LiteralType","value","NullType","UndefinedType","VoidType","undefined","ReadonlyType","ExactType","RefinementType","ReadonlyArrayType","AnyArrayType","unknown","ArrayType","InterfaceType","PartialType","ObjType","buildObject","props","v","IntersectionType","types","map","t","reduce","acc","x","UnionType","one","length","TupleType","p","console","log","Error","primitives","Number","String","Boolean","Date","Nil","fakeFromIrreducible","rt","verify","meta","kind","fakeFromRT","Any","kn","kv","word","k","isType","isInteger","isStruct","isInterface","isList","isDict","isIntersection","isMaybe","isUnion","isEnums","isTuple","isIrreducible","fakeObjects","resources","result","count","range","_","startFakeJSONServer","port","process","env","PORT","server","use","listen"],"mappings":"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"}